<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on ycwang&#39;s Blog</title>
    <link>https://www.ycwang.me/tags/python/</link>
    <description>Recent content in python on ycwang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2020–2021, ycwang all rights reserved.</copyright>
    <lastBuildDate>Mon, 28 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ycwang.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 类型系统</title>
      <link>https://www.ycwang.me/blog/python-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.ycwang.me/blog/python-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>类型系统 Python class 和 instance 的关系如下图所示： graph LR n1(instance) --instance of-- n2(class) --instance of-- n3(metaclass) 
定义一个 class
class F: pass 在 CPython 中的执行流程为 graph TD n1(opcode CALL_FUNCTION) -- n2(__build_class__) --&#34;find metaclass, name, bases, ns&#34;-- n3(metaclass.__call__) n3 --&#34;default metaclass is type&#34;-- n4(&#34;type_call(type, args, kwargs)&#34;) n4 -- n5{obj is instance of type?} n5 --yes-- n6(&#34;type-tp_init(obj, args, kwargs)&#34;) n5 --no-- n7(return obj) n6 -- n7 
创建一个 instance
f = Foo() 在 CPython 中的执行流程为 graph TD n1(opcode CALL_FUNCTION) -- n2(F.</description>
    </item>
    
    <item>
      <title>Python Import Hook 原理</title>
      <link>https://www.ycwang.me/blog/python-import-hook-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.ycwang.me/blog/python-import-hook-%E5%8E%9F%E7%90%86/</guid>
      <description>Python import 过程中，可以通过添加钩子，修改文件查找和加载的方式。游戏开发中，通常需要将脚本文件打包和加密，这时就要用到 Python import hook 机制。下面分别阐述 Python3 和 Python2 的 import hook 工作流程。
Python3 官方文档 Python3 The Import System 提供了最详细的说明。
模块查找 工作流程跟 Python2 不同，废除了 find_module 和 load_module，代之为 find_spec，create_module 和 exec_module。模块查找过程为：
 先从 sys.modules 里面找 其次通过 meta hooks 机制来加载模块，这是注册到 sys.meta_path 列表的对象，它拥有最高优先级，设置可以通过它替换 built-in module 然后从 sys.path 路径列表找模块，其中每个 path 会经由 import path hooks 来处理，这是注册到 sys.path_hooks 列表的对象，用以修改查找路径  Meta Hook 工作流程 分为2个部分：Finder 和 Loader
 调用 Finder.find_spec 获得 Spec 对象，其中 Spec.loader 为自定义的 Loader 对象 调用 Loader.</description>
    </item>
    
  </channel>
</rss>
